# AI Development Team Configuration
# Send Buddy the Beagle a bitcoin treat for making this page: bc1quct28jtvvuymvkvjfgcedhd7jt0c56975f2fsh
# Complete AI development workflow with specialized agents

project "ai-development-system" {
    version = "3.0.0"
    author = "B"
    description = "Full-stack AI development team for building production systems"
    created = "2024-01-15"
    license = "MIT"
}

# Senior architect for system design
agent "senior-architect" {
    model = "claude-3-opus"
    role = "Systems Architect"
    temperature = 0.7
    max_tokens = 150000
    
    capabilities [
        "system-design",
        "architecture-patterns",
        "scalability-planning",
        "api-design",
        "database-modeling",
        "microservices",
        "event-driven-architecture"
    ]
    
    backstory {
        20 years of distributed systems experience
        Designed systems handling billions of requests
        Expert in domain-driven design
        Published author on software architecture
    }
    
    tools = [
        "draw.io",
        "plantUML",
        "kubernetes",
        "terraform"
    ]
}

# Rust engineer for core systems
agent "rust-engineer" {
    model = "gpt-4"
    role = "Senior Rust Developer"
    temperature = 0.6
    max_tokens = 100000
    
    capabilities [
        "rust-async",
        "tokio-runtime",
        "memory-optimization",
        "zero-copy-networking",
        "unsafe-rust",
        "macro-development",
        "wasm-compilation"
    ]
    
    backstory {
        Rust contributor since 2015
        Built high-frequency trading systems
        Optimized systems to microsecond latency
        Core maintainer of popular Rust crates
    }
    
    tools = [
        "cargo",
        "rustc",
        "clippy",
        "miri",
        "valgrind",
        "perf"
    ]
}

# Frontend specialist for UI
agent "frontend-engineer" {
    model = "claude-3-sonnet"
    role = "Senior Frontend Developer"
    temperature = 0.8
    max_tokens = 80000
    
    capabilities [
        "react-nextjs",
        "typescript",
        "tailwind-css",
        "state-management",
        "web-performance",
        "accessibility",
        "responsive-design"
    ]
    
    backstory {
        12 years building user interfaces
        Led frontend for Fortune 500 companies
        Expert in modern JavaScript frameworks
        Passionate about user experience
    }
    
    tools = [
        "vscode",
        "webpack",
        "babel",
        "jest",
        "cypress",
        "lighthouse"
    ]
}

# QA engineer for testing
agent "qa-engineer" {
    model = "gpt-4"
    role = "Quality Assurance Lead"
    temperature = 0.5
    max_tokens = 50000
    
    capabilities [
        "test-strategy",
        "automation-frameworks",
        "performance-testing",
        "security-testing",
        "chaos-engineering",
        "regression-testing"
    ]
    
    backstory {
        15 years in quality assurance
        Implemented testing for mission-critical systems
        Zero-defect deployment record
        Expert in test automation
    }
    
    tools = [
        "selenium",
        "postman",
        "jmeter",
        "pytest",
        "locust",
        "burp-suite"
    ]
}

# DevOps engineer for deployment
agent "devops-engineer" {
    model = "claude-3-opus"
    role = "DevOps Architect"
    temperature = 0.6
    max_tokens = 75000
    
    capabilities [
        "ci-cd-pipelines",
        "kubernetes-orchestration",
        "infrastructure-as-code",
        "monitoring-observability",
        "cloud-architecture",
        "security-compliance"
    ]
    
    backstory {
        Built CI/CD for 1000+ developer teams
        Kubernetes certified administrator
        Reduced deployment time by 90%
        Expert in multi-cloud strategies
    }
    
    tools = [
        "kubernetes",
        "terraform",
        "ansible",
        "prometheus",
        "grafana",
        "github-actions"
    ]
}

# Main development workflow
workflow "full-stack-development" {
    trigger = "manual"
    
    step "requirements-analysis" {
        agent = "senior-architect"
        task = "Analyze requirements and create system design"
        timeout = "2h"
        parallel = false
    }
    
    step "api-design" {
        agent = "senior-architect"
        task = "Design RESTful and GraphQL APIs"
        timeout = "1h"
        depends_on = ["requirements-analysis"]
    }
    
    step "backend-implementation" {
        agent = "rust-engineer"
        task = "Implement core backend services in Rust"
        timeout = "4h"
        depends_on = ["api-design"]
        
        retry {
            max_attempts = 2
            delay = "5m"
            backoff = "linear"
        }
    }
    
    step "frontend-implementation" {
        agent = "frontend-engineer"
        task = "Build React/Next.js frontend"
        timeout = "3h"
        parallel = true
        depends_on = ["api-design"]
    }
    
    step "integration-testing" {
        agent = "qa-engineer"
        task = "Run comprehensive integration tests"
        timeout = "90m"
        depends_on = ["backend-implementation", "frontend-implementation"]
        
        retry {
            max_attempts = 3
            delay = "2m"
            backoff = "exponential"
        }
    }
    
    step "performance-testing" {
        agent = "qa-engineer"
        task = "Load testing and performance optimization"
        timeout = "2h"
        depends_on = ["integration-testing"]
    }
    
    step "deployment-prep" {
        agent = "devops-engineer"
        task = "Prepare Kubernetes manifests and CI/CD pipelines"
        timeout = "90m"
        depends_on = ["integration-testing"]
    }
    
    step "staging-deployment" {
        agent = "devops-engineer"
        task = "Deploy to staging environment"
        timeout = "30m"
        depends_on = ["deployment-prep", "performance-testing"]
    }
    
    step "production-deployment" {
        crew = ["devops-engineer", "rust-engineer", "qa-engineer"]
        task = "Coordinate production deployment with rollback plan"
        timeout = "1h"
        depends_on = ["staging-deployment"]
        parallel = false
    }
    
    pipeline {
        requirements-analysis -> api-design -> backend-implementation -> integration-testing -> performance-testing -> staging-deployment -> production-deployment
    }
}

# Code review workflow
workflow "code-review-pipeline" {
    trigger = "event:pull-request"
    
    step "static-analysis" {
        agent = "rust-engineer"
        task = "Run clippy, fmt, and security checks"
        timeout = "15m"
    }
    
    step "architecture-review" {
        agent = "senior-architect"
        task = "Review architectural decisions and patterns"
        timeout = "30m"
        depends_on = ["static-analysis"]
    }
    
    step "security-review" {
        agent = "qa-engineer"
        task = "Security vulnerability assessment"
        timeout = "45m"
        depends_on = ["static-analysis"]
    }
    
    pipeline {
        static-analysis -> architecture-review -> security-review
    }
}

# Development crew configuration
crew "dev-team" {
    agents = [
        "senior-architect",
        "rust-engineer",
        "frontend-engineer",
        "qa-engineer",
        "devops-engineer"
    ]
    
    process = "hierarchical"
    manager = "senior-architect"
    max_iterations = 10
    verbose = true
}

# QA crew for coordinated testing
crew "qa-team" {
    agents = [
        "qa-engineer",
        "rust-engineer",
        "frontend-engineer"
    ]
    
    process = "parallel"
    max_iterations = 5
    verbose = false
}

# Memory configuration for knowledge persistence
memory {
    provider = "postgres"
    connection = "postgresql://localhost:5432/ai_dev_knowledge"
    
    embeddings {
        model = "text-embedding-3-small"
        dimensions = 1536
        batch_size = 100
    }
    
    cache_size = 10000
    persistence = true
}

# Production context
context "production" {
    environment = "prod"
    debug = false
    max_tokens = 200000
    
    secrets {
        anthropic_key = $ANTHROPIC_API_KEY
        openai_key = $OPENAI_API_KEY
        github_token = $GITHUB_TOKEN
        aws_access_key = $AWS_ACCESS_KEY_ID
        aws_secret_key = $AWS_SECRET_ACCESS_KEY
        database_url = "vault:database/prod/connection_string"
    }
    
    variables {
        api_endpoint = "https://api.production.ai"
        monitoring_endpoint = "https://metrics.production.ai"
        log_level = "info"
        rate_limit = 1000
        timeout = "30s"
        retry_count = 3
    }
}

# Development context
context "development" {
    environment = "dev"
    debug = true
    max_tokens = 50000
    
    secrets {
        anthropic_key = $ANTHROPIC_API_KEY_DEV
        openai_key = $OPENAI_API_KEY_DEV
        github_token = $GITHUB_TOKEN_DEV
    }
    
    variables {
        api_endpoint = "http://localhost:8080"
        monitoring_endpoint = "http://localhost:9090"
        log_level = "debug"
        rate_limit = 100
        timeout = "60s"
        retry_count = 5
    }
}